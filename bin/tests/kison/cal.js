/*
  Generated by kissy-kison.*/
KISSY.add("tests/cal", function () {
    /* Generated by kison from KISSY */
    var parser = {}, S = KISSY,
        GrammarConst = {
            'SHIFT_TYPE': 1,
            'REDUCE_TYPE': 2,
            'ACCEPT_TYPE': 0,
            'TYPE_INDEX': 0,
            'PRODUCTION_INDEX': 1,
            'TO_INDEX': 2
        };
    var Lexer = function (cfg) {

        var self = this;

        /**
         * lex rules.
         * @type {Object[]}
         * @example
         * [
         *  {
         *   regexp:'\\w+',
         *   state:'xx',
         *   token:'c',
         *   // this => lex
         *   action:function(){}
         *  }
         * ]
         */
        self.rules = [];

        S.mix(self, cfg);

        for (var i = 0, l = self.rules.length; i < l; i++) {
            var r = self.rules[i];
            if (!S.isArray(r) && !r.state) {
                r.state = Lexer.STATIC.INIT;
            }
        }

        /**
         * Input languages
         * @type {String}
         */

        self.resetInput(self.input);

    };
    Lexer.prototype = {
        'resetInput': function (input) {
            var self = this;
            self.input = input;
            S.mix(self, {
                matched: "",
                stateStack: [Lexer.STATIC.INIT],
                match: "",
                text: "",
                firstLine: 1,
                lineNumber: 1,
                lastLine: 1,
                firstColumn: 1,
                lastColumn: 1
            });
        },
        'getCurrentRules': function () {
            var self = this,
                currentState = self.stateStack[self.stateStack.length - 1],
                rules = [];
            S.each(self.rules, function (r) {
                var state = r.state || r[3];
                if (state == currentState) {
                    rules.push(r);
                }
            });
            return rules;
        },
        'pushState': function (state) {
            this.stateStack.push(state);
        },
        'popState': function () {
            this.stateStack.pop();
        },
        'showDebugInfo': function () {
            var self = this,
                DEBUG_CONTEXT_LIMIT = Lexer.STATIC.DEBUG_CONTEXT_LIMIT,
                matched = self.matched,
                match = self.match,
                input = self.input;
            matched = matched.slice(0, matched.length - match.length);
            var past = (matched.length > DEBUG_CONTEXT_LIMIT ? "..." : "") + matched.slice(-DEBUG_CONTEXT_LIMIT).replace(/\n/, " "),
                next = match + input;
            next = next.slice(0, DEBUG_CONTEXT_LIMIT) + (next.length > DEBUG_CONTEXT_LIMIT ? "..." : "");
            return past + next + "\n" + new Array(past.length + 1).join("-") + "^";
        },
        'lex': function () {
            var self = this,
                input = self.input,
                i,
                rule,
                m,
                ret,
                lines,
                rules = self.getCurrentRules();

            self.match = self.text = "";

            if (!S.trim(input)) {
                return self.END_TAG || Lexer.STATIC.END_TAG;
            }

            for (i = 0; i < rules.length; i++) {
                rule = rules[i];
                var regexp = rule.regexp || rule[1],
                    token = rule.token || rule[0],
                    action = rule.action || rule[2] || undefined;
                if (m = input.match(regexp)) {
                    lines = m[0].match(/\n.*/g);
                    if (lines) {
                        self.lineNumber += lines.length;
                    }
                    S.mix(self, {
                        firstLine: self.lastLine,
                        lastLine: self.lineNumber + 1,
                        firstColumn: self.lastColumn,
                        lastColumn: lines ? lines[lines.length - 1].length - 1 : self.lastColumn + m[0].length
                    });
                    var match;
                    // for error report
                    match = self.match = m[0];

                    // all matches
                    self.matches = m;
                    // may change by user
                    self.text = match;
                    // matched content utils now
                    self.matched += match;
                    ret = action && action.call(self);
                    if (ret == undefined) {
                        ret = token;
                    }
                    input = input.slice(match.length);
                    self.input = input;

                    if (ret) {
                        return ret;
                    } else {
                        // ignore
                        return self.lex();
                    }
                }
            }

            S.error("lex error at line " + self.lineNumber + ":\n" + self.showDebugInfo());
        }
    };
    Lexer.STATIC = {
        'INIT': 1,
        'DEBUG_CONTEXT_LIMIT': 20,
        'END_TAG': '$EOF'
    };
    var lexer = new Lexer({
        'rules': [
            [0, /^\s+/, 0, 1],
            [2, /^[0-9]+(\.[0-9]+)?\b/, 0, 1],
            [3, /^\+/, 0, 1],
            [4, /^-/, 0, 1],
            [5, /^./, 0, 1]
        ]
    });
    lexer.END_TAG = 1;
    parser.lexer = lexer;
    parser.productions = [
        [7, [8], 0],
        [8, [9], 0],
        [9, [9, 4, 9], function () {
            return this.$1 - this.$3;
        }],
        [9, [9, 3, 9], function () {
            return this.$1 + this.$3;
        }],
        [9, [2], function () {
            return Number(this.$1);
        }]
    ];
    parser.table = {
        'gotos': {
            '0': {
                '8': 2,
                '9': 3
            },
            '4': {
                '9': 6
            },
            '5': {
                '9': 7
            }
        },
        'action': {
            '0': {
                '2': [1, 0, 1]
            },
            '1': {
                '1': [2, 4, 0],
                '3': [2, 4, 0],
                '4': [2, 4, 0]
            },
            '2': {
                '1': [0, 0, 0]
            },
            '3': {
                '1': [2, 1, 0],
                '3': [1, 0, 4],
                '4': [1, 0, 5]
            },
            '4': {
                '2': [1, 0, 1]
            },
            '5': {
                '2': [1, 0, 1]
            },
            '6': {
                '1': [2, 3, 0],
                '3': [2, 3, 0],
                '4': [2, 3, 0]
            },
            '7': {
                '1': [2, 2, 0],
                '3': [2, 2, 0],
                '4': [2, 2, 0]
            }
        }
    };
    parser.parse = function parse(input) {

        var self = this,
            lexer = self.lexer,
            state,
            symbol,
            action,
            table = self.table,
            gotos = table.gotos,
            tableAction = table.action,
            productions = self.productions,
            valueStack = [null],
            stack = [0];

        lexer.resetInput(input);

        while (1) {
            // retrieve state number from top of stack
            state = stack[stack.length - 1];

            if (!symbol) {
                symbol = lexer.lex();
            }

            if (!symbol) {
                S.log("it is not a valid input : " + input, "error");
                return false;
            }

            // read action for current state and first input
            action = tableAction[state] && tableAction[state][symbol];

            if (!action) {
                var expected = [];
                if (tableAction[state]) {
                    S.each(tableAction[state], function (_, symbol) {
                        expected.push(symbol);
                    });
                }
                S.error("parse error at line " + lexer.lineNumber + ":\n" + lexer.showDebugInfo() + "\n" + "expect " + expected.join(", "));
                return false;
            }

            switch (action[GrammarConst.TYPE_INDEX]) {

            case GrammarConst.SHIFT_TYPE:

                stack.push(symbol);

                valueStack.push(lexer.text);

                // push state
                stack.push(action[GrammarConst.TO_INDEX]);

                // allow to read more
                symbol = null;

                break;

            case GrammarConst.REDUCE_TYPE:

                var production = productions[action[GrammarConst.PRODUCTION_INDEX]],
                    reducedSymbol = production.symbol || production[0],
                    reducedAction = production.action || production[2],
                    reducedRhs = production.rhs || production[1];

                var len = reducedRhs.length;

                var $$ = valueStack[valueStack.length - len]; // default to $$ = $1

                self.$$ = $$;

                for (var i = 0; i < len; i++) {
                    self["$" + (len - i)] = valueStack[valueStack.length - 1 - i];
                }

                var ret;

                if (reducedAction) {
                    ret = reducedAction.call(self);
                }

                if (ret !== undefined) {
                    $$ = ret;
                } else {
                    $$ = self.$$;
                }

                if (len) {
                    stack = stack.slice(0, - 1 * len * 2);
                    valueStack = valueStack.slice(0, - 1 * len);
                }

                stack.push(reducedSymbol);

                valueStack.push($$);

                var newState = gotos[stack[stack.length - 2]][stack[stack.length - 1]];

                stack.push(newState);

                break;

            case GrammarConst.ACCEPT_TYPE:

                return $$;
            }

        }

        return undefined;

    };
    return parser;;
});