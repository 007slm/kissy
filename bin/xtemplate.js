#!/usr/bin/env node

/**
 * Generate xtemplate function by xtemplate file using kissy xtemplate.
 * @author yiminghe@gmail.com
 */

var argv = require('optimist')
        .demand('t')
        .alias('t', 'tpl')
        .describe('t', 'kissy xtemplate file')
        .alias('m', 'module')
        .describe('m', 'generated kissy module name')
        .describe('e', 'xtemplate file encoding')
        .alias('encoding', 'e')
        .describe('w', 'watch xtemplate file change')
        .boolean('w')
        .alias('watch', 'w')
        .usage('generate kissy module file from kissy xtemplate file.\n' +
        'usage: $0 -t [tpl file] -m [module name]').argv,

    S = require('../build/kissy-nodejs-min'),
    fs = require('fs'),
    tpl = argv.tpl,
    path = require('path'),
    encoding = argv.e || 'utf-8';

S.log('*********** tpl:');
S.log(tpl);

var tplBaseName = path.basename(tpl, '-tpl.html');

S.log('*********** tplBaseName:');
S.log(tplBaseName);

var modulePath = path.resolve(tpl, '../' + tplBaseName + '.js');

S.log('*********** modulePath:');
S.log(modulePath);


var codeTemplate = '' +
    '/*\n' +
    '  Generated by kissy-xtemplate.' +
    '*/\n' +
    'KISSY.add({module} function(){\n' +
    'return {code};\n' +
    '});';

var module = argv.module || '';

if (module) {
    module = '"' + module + '",';
}

S.use('xtemplate', function (S, XTemplate) {

    function compile() {

        var tplContent = fs.readFileSync(tpl, encoding);
        S.log('*********** tplContent:');
        S.log(tplContent);

        var code = new XTemplate(tplContent, {
            name: tplBaseName + '-tpl',
            cache: false
        }).compile().toString();

        var moduleCode = S.substitute(codeTemplate, {
            module: module,
            code: code
        });

        S.log(moduleCode);

        fs.writeFileSync(modulePath, moduleCode, encoding);

        console.info('generate tpl module: ' + modulePath + ' at ' + (new Date().toLocaleString()));

    }

    var bufferCompile = S.buffer(compile);

    if (argv.watch) {
        fs.watch(tpl, bufferCompile);
        compile();
    } else {
        bufferCompile();
    }

});