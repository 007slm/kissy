/**
* parser for xtemplate from kison.
* @author yiminghe@gmail.com
*/
KISSY.add('xtemplate/parser', function () {
/* Generated by kison from KISSY */
var parser = {},
    S = KISSY,
    REDUCE_TYPE = 2,
    SHIFT_TYPE = 1,
    ACCEPT_TYPE = 0;

function Lexer(cfg) {

    /**
     * lex rules.
     * @type {Object[]}
     * @example
     * [
     *  {
     *   regexp:'\\w+',
     *   state:'xx',
     *   token:'c',
     *   // this => lex
     *   action:function(){}
     *  }
     * ]
     */
    this.rules = [];

    S.mix(this, cfg);

    S.each(this.rules, function (r) {
        if (!r.state) {
            r.state = Lexer.STATIC.INIT;
        }
    });

    /**
     * Input languages
     * @type {String}
     */

    this.resetInput(this.input);

}
Lexer.prototype = {
    "resetInput": function (input) {
        this.input = input;
        S.mix(this, {
            matched: "",
            stateStack: [Lexer.STATIC.INIT],
            match: "",
            text: "",
            firstLine: 1,
            lineNumber: 1,
            lastLine: 1,
            firstColumn: 1,
            lastColumn: 1
        });
    },
    "getCurrentRules": function () {
        var currentState = this.stateStack[this.stateStack.length - 1];
        var rules = [];
        S.each(this.rules, function (r) {
            if (r.state == currentState) {
                rules.push(r);
            }
        });
        return rules;
    },
    "pushState": function (state) {
        this.stateStack.push(state);
    },
    "popState": function () {
        this.stateStack.pop();
    },
    "showDebugInfo": function () {
        var DEBUG_CONTEXT_LIMIT = Lexer.STATIC.DEBUG_CONTEXT_LIMIT;
        var matched = this.matched,
            match = this.match,
            input = this.input;
        matched = matched.slice(0, matched.length - match.length);
        var past = (matched.length > DEBUG_CONTEXT_LIMIT ? "..." : "") + matched.slice(-DEBUG_CONTEXT_LIMIT).replace(/\n/, " ");
        var next = match + input;
        next = next.slice(0, DEBUG_CONTEXT_LIMIT) + (next.length > DEBUG_CONTEXT_LIMIT ? "..." : "");
        return past + next + "\n" + new Array(past.length + 1).join("-") + "^";
    },
    "lex": function () {
        var self = this,
            input = self.input,
            i, rule, m, ret, lines, rules = self.getCurrentRules();

        self.match = self.text = "";

        if (!S.trim(input)) {
            return Lexer.STATIC.END_TAG;
        }

        for (i = 0; i < rules.length; i++) {
            rule = rules[i];
            if (m = input.match(rule.regexp)) {
                lines = m[0].match(/\n.*/g);
                if (lines) {
                    self.lineNumber += lines.length;
                }
                S.mix(self, {
                    firstLine: self.lastLine,
                    lastLine: self.lineNumber + 1,
                    firstColumn: self.lastColumn,
                    lastColumn: lines ? lines[lines.length - 1].length - 1 : self.lastColumn + m[0].length
                });
                var match;
                // for error report
                match = self.match = m[0];

                // all matches
                self.matches = m;
                // may change by user
                self.text = match;
                // matched content utils now
                self.matched += match;
                ret = rule.action && rule.action.call(this);
                if (ret == undefined) {
                    ret = rule.token;
                }
                input = input.slice(match.length);
                self.input = input;

                if (ret) {
                    return ret;
                } else {
                    // ignore
                    return self.lex();
                }
            }
        }

        S.error("lex error at line " + this.lineNumber + ":\n" + this.showDebugInfo());
    }
};
Lexer.STATIC = {
    "INIT": "init6",
    "DEBUG_CONTEXT_LIMIT": 20,
    "END_TAG": "$EOF"
};
var lexer = new Lexer({
    "rules": [{
        "regexp": /^[\s\S]*?(?={{)/,
        "token": "CONTENT",
        "action": function () {
            if (this.text.slice(-1) !== '\\') {
                this.pushState('t');
            } else {
                this.text = this.text.slice(0, -1);
                this.pushState('et');
            }
        },
        "state": "init6"
    }, {
        "regexp": /^[\s\S]+/,
        "token": "CONTENT",
        "state": "init6"
    }, {
        "state": "et",
        "token": "CONTENT",
        "regexp": /^[\s\S]{2,}?(?={{)/,
        "action": function () {
            this.popState();
        }
    }, {
        "state": "t",
        "regexp": /^{{#/,
        "token": "OPEN_BLOCK"
    }, {
        "state": "t",
        "regexp": /^{{\//,
        "token": "OPEN_END_BLOCK"
    }, {
        "state": "t",
        "regexp": /^{{\s*else/,
        "token": "OPEN_INVERSE"
    }, {
        "state": "t",
        "regexp": /^{{{/,
        "token": "OPEN_UN_ESCAPED"
    }, {
        "state": "t",
        "regexp": /^{{![\s\S]*?}}/,
        "action": function () {
            // return to content mode
            this.popState();
        }
    }, {
        "state": "t",
        "regexp": /^{{/,
        "token": "OPEN"
    }, {
        "state": "t",
        "regexp": /^\s+/
    }, {
        "state": "t",
        "regexp": /^}}}/,
        "action": function () {
            this.popState();
        },
        "token": "CLOSE"
    }, {
        "state": "t",
        "regexp": /^}}/,
        "action": function () {
            this.popState();
        },
        "token": "CLOSE"
    }, {
        "state": "t",
        "regexp": /^"(\\"|[^"])*"/,
        "action": function () {
            this.text = this.text.slice(1, -1).replace(/\\"/g, '"');
        },
        "token": "STRING"
    }, {
        "state": "t",
        "regexp": /^'(\\'|[^'])*'/,
        "action": function () {
            this.text = this.text.slice(1, -1).replace(/\\'/g, "'");
        },
        "token": "STRING"
    }, {
        "state": "t",
        "regexp": /^true/,
        "token": "BOOLEAN"
    }, {
        "state": "t",
        "regexp": /^false/,
        "token": "BOOLEAN"
    }, {
        "state": "t",
        "regexp": /^\d+(\.\d+)?/,
        "token": "NUMBER"
    }, {
        "state": "t",
        "regexp": /^=/,
        "token": "EQUALS"
    }, {
        "state": "t",
        "regexp": /^\.\./,
        "token": "ID"
    }, {
        "state": "t",
        "regexp": /^[\/.]/,
        "token": "SEP"
    }, {
        "state": "t",
        "regexp": /^[a-zA-Z0-9_$-]+/,
        "token": "ID"
    }, {
        "state": "t",
        "regexp": /^\[[^\]]*\]/,
        "token": "ID",
        "action": function () {
            this.text = this.text.slice(1, -1);
        }
    }, {
        "state": "t",
        "regexp": /^./,
        "token": "INVALID"
    }]
});
parser.lexer = lexer;
parser.productions = [{
    "symbol": "$START",
    "rhs": ["program"],
    "action": undefined
}, {
    "symbol": "program",
    "rhs": ["statements", "inverse", "statements"],
    "action": function () {
        return new this.yy.ProgramNode(this.lexer.lineNumber, this.$1, this.$3);
    }
}, {
    "symbol": "program",
    "rhs": ["statements"],
    "action": function () {
        return new this.yy.ProgramNode(this.lexer.lineNumber, this.$1);
    }
}, {
    "symbol": "statements",
    "rhs": ["statement"],
    "action": function () {
        return [this.$1];
    }
}, {
    "symbol": "statements",
    "rhs": ["statements", "statement"],
    "action": function () {
        this.$1.push(this.$2);
    }
}, {
    "symbol": "statement",
    "rhs": ["openBlock", "program", "closeBlock"],
    "action": function () {
        return new this.yy.BlockNode(this.lexer.lineNumber, this.$1, this.$2, this.$3);
    }
}, {
    "symbol": "statement",
    "rhs": ["tpl"],
    "action": undefined
}, {
    "symbol": "statement",
    "rhs": ["CONTENT"],
    "action": function () {
        return new this.yy.ContentNode(this.lexer.lineNumber, this.$1);
    }
}, {
    "symbol": "openBlock",
    "rhs": ["OPEN_BLOCK", "inTpl", "CLOSE"],
    "action": function () {
        return this.$2;
    }
}, {
    "symbol": "closeBlock",
    "rhs": ["OPEN_END_BLOCK", "path", "CLOSE"],
    "action": function () {
        return this.$2;
    }
}, {
    "symbol": "tpl",
    "rhs": ["OPEN", "inTpl", "CLOSE"],
    "action": function () {
        return this.$2;
    }
}, {
    "symbol": "tpl",
    "rhs": ["OPEN_UN_ESCAPED", "inTpl", "CLOSE"],
    "action": function () {
        this.$2.escaped = false;
        return this.$2;
    }
}, {
    "symbol": "inverse",
    "rhs": ["OPEN_INVERSE", "CLOSE"],
    "action": undefined
}, {
    "symbol": "inTpl",
    "rhs": ["path", "params", "hash"],
    "action": function () {
        return new this.yy.TplNode(this.lexer.lineNumber, this.$1, this.$2, this.$3);
    }
}, {
    "symbol": "inTpl",
    "rhs": ["path", "params"],
    "action": function () {
        return new this.yy.TplNode(this.lexer.lineNumber, this.$1, this.$2);
    }
}, {
    "symbol": "inTpl",
    "rhs": ["path", "hash"],
    "action": function () {
        return new this.yy.TplNode(this.lexer.lineNumber, this.$1, null, this.$2);
    }
}, {
    "symbol": "inTpl",
    "rhs": ["path"],
    "action": function () {
        return new this.yy.TplNode(this.lexer.lineNumber, this.$1);
    }
}, {
    "symbol": "params",
    "rhs": ["params", "param"],
    "action": function () {
        this.$1.push(this.$2);
    }
}, {
    "symbol": "params",
    "rhs": ["param"],
    "action": function () {
        return [this.$1];
    }
}, {
    "symbol": "param",
    "rhs": ["path"],
    "action": undefined
}, {
    "symbol": "param",
    "rhs": ["STRING"],
    "action": function () {
        return new this.yy.StringNode(this.lexer.lineNumber, this.$1);
    }
}, {
    "symbol": "param",
    "rhs": ["NUMBER"],
    "action": function () {
        return new this.yy.NumberNode(this.lexer.lineNumber, this.$1);
    }
}, {
    "symbol": "param",
    "rhs": ["BOOLEAN"],
    "action": function () {
        return new this.yy.BooleanNode(this.lexer.lineNumber, this.$1);
    }
}, {
    "symbol": "hash",
    "rhs": ["hashSegments"],
    "action": function () {
        return new this.yy.HashNode(this.lexer.lineNumber, this.$1);
    }
}, {
    "symbol": "hashSegments",
    "rhs": ["hashSegments", "hashSegment"],
    "action": function () {
        this.$1.push(this.$2);
    }
}, {
    "symbol": "hashSegments",
    "rhs": ["hashSegment"],
    "action": function () {
        return [this.$1];
    }
}, {
    "symbol": "hashSegment",
    "rhs": ["ID", "EQUALS", "path"],
    "action": function () {
        return [this.$1, this.$3];
    }
}, {
    "symbol": "hashSegment",
    "rhs": ["ID", "EQUALS", "STRING"],
    "action": function () {
        return [this.$1, new this.yy.StringNode(this.lexer.lineNumber, this.$3)];
    }
}, {
    "symbol": "hashSegment",
    "rhs": ["ID", "EQUALS", "NUMBER"],
    "action": function () {
        return [this.$1, new this.yy.NumberNode(this.lexer.lineNumber, this.$3)];
    }
}, {
    "symbol": "hashSegment",
    "rhs": ["ID", "EQUALS", "BOOLEAN"],
    "action": function () {
        return [this.$1, new this.yy.BooleanNode(this.lexer.lineNumber, this.$3)];
    }
}, {
    "symbol": "path",
    "rhs": ["pathSegments"],
    "action": function () {
        return new this.yy.IdNode(this.lexer.lineNumber, this.$1);
    }
}, {
    "symbol": "pathSegments",
    "rhs": ["pathSegments", "SEP", "ID"],
    "action": function () {
        this.$1.push(this.$3);
    }
}, {
    "symbol": "pathSegments",
    "rhs": ["ID"],
    "action": function () {
        return [this.$1];
    }
}];
parser.table = {
    "gotos": {
        "0": {
            "program": 5,
            "statements": 6,
            "statement": 7,
            "openBlock": 8,
            "tpl": 9
        },
        "2": {
            "inTpl": 11,
            "path": 12,
            "pathSegments": 13
        },
        "3": {
            "inTpl": 14,
            "path": 12,
            "pathSegments": 13
        },
        "4": {
            "inTpl": 15,
            "path": 12,
            "pathSegments": 13
        },
        "6": {
            "statement": 17,
            "openBlock": 8,
            "tpl": 9,
            "inverse": 18
        },
        "8": {
            "program": 19,
            "statements": 6,
            "statement": 7,
            "openBlock": 8,
            "tpl": 9
        },
        "12": {
            "params": 25,
            "param": 26,
            "hash": 27,
            "hashSegments": 28,
            "hashSegment": 29,
            "path": 30,
            "pathSegments": 13
        },
        "18": {
            "statements": 35,
            "statement": 7,
            "openBlock": 8,
            "tpl": 9
        },
        "19": {
            "closeBlock": 37
        },
        "25": {
            "param": 39,
            "hash": 40,
            "hashSegments": 28,
            "hashSegment": 29,
            "path": 30,
            "pathSegments": 13
        },
        "28": {
            "hashSegment": 42
        },
        "35": {
            "statement": 17,
            "openBlock": 8,
            "tpl": 9
        },
        "36": {
            "path": 44,
            "pathSegments": 13
        },
        "38": {
            "path": 48,
            "pathSegments": 13
        }
    },
    "action": {
        "0": {
            "CONTENT": {
                "type": 1,
                "to": 1
            },
            "OPEN_BLOCK": {
                "type": 1,
                "to": 2
            },
            "OPEN_UN_ESCAPED": {
                "type": 1,
                "to": 3
            },
            "OPEN": {
                "type": 1,
                "to": 4
            }
        },
        "1": {
            "$EOF": {
                "type": 2,
                "production": 7
            },
            "OPEN_INVERSE": {
                "type": 2,
                "production": 7
            },
            "OPEN_BLOCK": {
                "type": 2,
                "production": 7
            },
            "OPEN": {
                "type": 2,
                "production": 7
            },
            "OPEN_UN_ESCAPED": {
                "type": 2,
                "production": 7
            },
            "CONTENT": {
                "type": 2,
                "production": 7
            },
            "OPEN_END_BLOCK": {
                "type": 2,
                "production": 7
            }
        },
        "2": {
            "ID": {
                "type": 1,
                "to": 10
            }
        },
        "3": {
            "ID": {
                "type": 1,
                "to": 10
            }
        },
        "4": {
            "ID": {
                "type": 1,
                "to": 10
            }
        },
        "5": {
            "$EOF": {
                "type": 0
            }
        },
        "6": {
            "CONTENT": {
                "type": 1,
                "to": 1
            },
            "OPEN_BLOCK": {
                "type": 1,
                "to": 2
            },
            "OPEN_INVERSE": {
                "type": 1,
                "to": 16
            },
            "OPEN_UN_ESCAPED": {
                "type": 1,
                "to": 3
            },
            "OPEN": {
                "type": 1,
                "to": 4
            },
            "$EOF": {
                "type": 2,
                "production": 2
            },
            "OPEN_END_BLOCK": {
                "type": 2,
                "production": 2
            }
        },
        "7": {
            "$EOF": {
                "type": 2,
                "production": 3
            },
            "OPEN_INVERSE": {
                "type": 2,
                "production": 3
            },
            "OPEN_BLOCK": {
                "type": 2,
                "production": 3
            },
            "OPEN": {
                "type": 2,
                "production": 3
            },
            "OPEN_UN_ESCAPED": {
                "type": 2,
                "production": 3
            },
            "CONTENT": {
                "type": 2,
                "production": 3
            },
            "OPEN_END_BLOCK": {
                "type": 2,
                "production": 3
            }
        },
        "8": {
            "CONTENT": {
                "type": 1,
                "to": 1
            },
            "OPEN_BLOCK": {
                "type": 1,
                "to": 2
            },
            "OPEN_UN_ESCAPED": {
                "type": 1,
                "to": 3
            },
            "OPEN": {
                "type": 1,
                "to": 4
            }
        },
        "9": {
            "$EOF": {
                "type": 2,
                "production": 6
            },
            "OPEN_INVERSE": {
                "type": 2,
                "production": 6
            },
            "OPEN_BLOCK": {
                "type": 2,
                "production": 6
            },
            "OPEN": {
                "type": 2,
                "production": 6
            },
            "OPEN_UN_ESCAPED": {
                "type": 2,
                "production": 6
            },
            "CONTENT": {
                "type": 2,
                "production": 6
            },
            "OPEN_END_BLOCK": {
                "type": 2,
                "production": 6
            }
        },
        "10": {
            "CLOSE": {
                "type": 2,
                "production": 32
            },
            "ID": {
                "type": 2,
                "production": 32
            },
            "STRING": {
                "type": 2,
                "production": 32
            },
            "NUMBER": {
                "type": 2,
                "production": 32
            },
            "BOOLEAN": {
                "type": 2,
                "production": 32
            },
            "SEP": {
                "type": 2,
                "production": 32
            }
        },
        "11": {
            "CLOSE": {
                "type": 1,
                "to": 20
            }
        },
        "12": {
            "STRING": {
                "type": 1,
                "to": 21
            },
            "BOOLEAN": {
                "type": 1,
                "to": 22
            },
            "NUMBER": {
                "type": 1,
                "to": 23
            },
            "ID": {
                "type": 1,
                "to": 24
            },
            "CLOSE": {
                "type": 2,
                "production": 16
            }
        },
        "13": {
            "SEP": {
                "type": 1,
                "to": 31
            },
            "CLOSE": {
                "type": 2,
                "production": 30
            },
            "ID": {
                "type": 2,
                "production": 30
            },
            "STRING": {
                "type": 2,
                "production": 30
            },
            "NUMBER": {
                "type": 2,
                "production": 30
            },
            "BOOLEAN": {
                "type": 2,
                "production": 30
            }
        },
        "14": {
            "CLOSE": {
                "type": 1,
                "to": 32
            }
        },
        "15": {
            "CLOSE": {
                "type": 1,
                "to": 33
            }
        },
        "16": {
            "CLOSE": {
                "type": 1,
                "to": 34
            }
        },
        "17": {
            "$EOF": {
                "type": 2,
                "production": 4
            },
            "OPEN_INVERSE": {
                "type": 2,
                "production": 4
            },
            "OPEN_BLOCK": {
                "type": 2,
                "production": 4
            },
            "OPEN": {
                "type": 2,
                "production": 4
            },
            "OPEN_UN_ESCAPED": {
                "type": 2,
                "production": 4
            },
            "CONTENT": {
                "type": 2,
                "production": 4
            },
            "OPEN_END_BLOCK": {
                "type": 2,
                "production": 4
            }
        },
        "18": {
            "CONTENT": {
                "type": 1,
                "to": 1
            },
            "OPEN_BLOCK": {
                "type": 1,
                "to": 2
            },
            "OPEN_UN_ESCAPED": {
                "type": 1,
                "to": 3
            },
            "OPEN": {
                "type": 1,
                "to": 4
            }
        },
        "19": {
            "OPEN_END_BLOCK": {
                "type": 1,
                "to": 36
            }
        },
        "20": {
            "OPEN_BLOCK": {
                "type": 2,
                "production": 8
            },
            "OPEN": {
                "type": 2,
                "production": 8
            },
            "OPEN_UN_ESCAPED": {
                "type": 2,
                "production": 8
            },
            "CONTENT": {
                "type": 2,
                "production": 8
            }
        },
        "21": {
            "CLOSE": {
                "type": 2,
                "production": 20
            },
            "ID": {
                "type": 2,
                "production": 20
            },
            "STRING": {
                "type": 2,
                "production": 20
            },
            "NUMBER": {
                "type": 2,
                "production": 20
            },
            "BOOLEAN": {
                "type": 2,
                "production": 20
            }
        },
        "22": {
            "CLOSE": {
                "type": 2,
                "production": 22
            },
            "ID": {
                "type": 2,
                "production": 22
            },
            "STRING": {
                "type": 2,
                "production": 22
            },
            "NUMBER": {
                "type": 2,
                "production": 22
            },
            "BOOLEAN": {
                "type": 2,
                "production": 22
            }
        },
        "23": {
            "CLOSE": {
                "type": 2,
                "production": 21
            },
            "ID": {
                "type": 2,
                "production": 21
            },
            "STRING": {
                "type": 2,
                "production": 21
            },
            "NUMBER": {
                "type": 2,
                "production": 21
            },
            "BOOLEAN": {
                "type": 2,
                "production": 21
            }
        },
        "24": {
            "EQUALS": {
                "type": 1,
                "to": 38
            },
            "CLOSE": {
                "type": 2,
                "production": 32
            },
            "ID": {
                "type": 2,
                "production": 32
            },
            "STRING": {
                "type": 2,
                "production": 32
            },
            "NUMBER": {
                "type": 2,
                "production": 32
            },
            "BOOLEAN": {
                "type": 2,
                "production": 32
            },
            "SEP": {
                "type": 2,
                "production": 32
            }
        },
        "25": {
            "STRING": {
                "type": 1,
                "to": 21
            },
            "BOOLEAN": {
                "type": 1,
                "to": 22
            },
            "NUMBER": {
                "type": 1,
                "to": 23
            },
            "ID": {
                "type": 1,
                "to": 24
            },
            "CLOSE": {
                "type": 2,
                "production": 14
            }
        },
        "26": {
            "CLOSE": {
                "type": 2,
                "production": 18
            },
            "ID": {
                "type": 2,
                "production": 18
            },
            "STRING": {
                "type": 2,
                "production": 18
            },
            "NUMBER": {
                "type": 2,
                "production": 18
            },
            "BOOLEAN": {
                "type": 2,
                "production": 18
            }
        },
        "27": {
            "CLOSE": {
                "type": 2,
                "production": 15
            }
        },
        "28": {
            "ID": {
                "type": 1,
                "to": 41
            },
            "CLOSE": {
                "type": 2,
                "production": 23
            }
        },
        "29": {
            "CLOSE": {
                "type": 2,
                "production": 25
            },
            "ID": {
                "type": 2,
                "production": 25
            }
        },
        "30": {
            "CLOSE": {
                "type": 2,
                "production": 19
            },
            "ID": {
                "type": 2,
                "production": 19
            },
            "STRING": {
                "type": 2,
                "production": 19
            },
            "NUMBER": {
                "type": 2,
                "production": 19
            },
            "BOOLEAN": {
                "type": 2,
                "production": 19
            }
        },
        "31": {
            "ID": {
                "type": 1,
                "to": 43
            }
        },
        "32": {
            "$EOF": {
                "type": 2,
                "production": 11
            },
            "OPEN_INVERSE": {
                "type": 2,
                "production": 11
            },
            "OPEN_BLOCK": {
                "type": 2,
                "production": 11
            },
            "OPEN": {
                "type": 2,
                "production": 11
            },
            "OPEN_UN_ESCAPED": {
                "type": 2,
                "production": 11
            },
            "CONTENT": {
                "type": 2,
                "production": 11
            },
            "OPEN_END_BLOCK": {
                "type": 2,
                "production": 11
            }
        },
        "33": {
            "$EOF": {
                "type": 2,
                "production": 10
            },
            "OPEN_INVERSE": {
                "type": 2,
                "production": 10
            },
            "OPEN_BLOCK": {
                "type": 2,
                "production": 10
            },
            "OPEN": {
                "type": 2,
                "production": 10
            },
            "OPEN_UN_ESCAPED": {
                "type": 2,
                "production": 10
            },
            "CONTENT": {
                "type": 2,
                "production": 10
            },
            "OPEN_END_BLOCK": {
                "type": 2,
                "production": 10
            }
        },
        "34": {
            "OPEN_BLOCK": {
                "type": 2,
                "production": 12
            },
            "OPEN": {
                "type": 2,
                "production": 12
            },
            "OPEN_UN_ESCAPED": {
                "type": 2,
                "production": 12
            },
            "CONTENT": {
                "type": 2,
                "production": 12
            }
        },
        "35": {
            "CONTENT": {
                "type": 1,
                "to": 1
            },
            "OPEN_BLOCK": {
                "type": 1,
                "to": 2
            },
            "OPEN_UN_ESCAPED": {
                "type": 1,
                "to": 3
            },
            "OPEN": {
                "type": 1,
                "to": 4
            },
            "$EOF": {
                "type": 2,
                "production": 1
            },
            "OPEN_END_BLOCK": {
                "type": 2,
                "production": 1
            }
        },
        "36": {
            "ID": {
                "type": 1,
                "to": 10
            }
        },
        "37": {
            "$EOF": {
                "type": 2,
                "production": 5
            },
            "OPEN_INVERSE": {
                "type": 2,
                "production": 5
            },
            "OPEN_BLOCK": {
                "type": 2,
                "production": 5
            },
            "OPEN": {
                "type": 2,
                "production": 5
            },
            "OPEN_UN_ESCAPED": {
                "type": 2,
                "production": 5
            },
            "CONTENT": {
                "type": 2,
                "production": 5
            },
            "OPEN_END_BLOCK": {
                "type": 2,
                "production": 5
            }
        },
        "38": {
            "STRING": {
                "type": 1,
                "to": 45
            },
            "BOOLEAN": {
                "type": 1,
                "to": 46
            },
            "NUMBER": {
                "type": 1,
                "to": 47
            },
            "ID": {
                "type": 1,
                "to": 10
            }
        },
        "39": {
            "CLOSE": {
                "type": 2,
                "production": 17
            },
            "ID": {
                "type": 2,
                "production": 17
            },
            "STRING": {
                "type": 2,
                "production": 17
            },
            "NUMBER": {
                "type": 2,
                "production": 17
            },
            "BOOLEAN": {
                "type": 2,
                "production": 17
            }
        },
        "40": {
            "CLOSE": {
                "type": 2,
                "production": 13
            }
        },
        "41": {
            "EQUALS": {
                "type": 1,
                "to": 38
            }
        },
        "42": {
            "CLOSE": {
                "type": 2,
                "production": 24
            },
            "ID": {
                "type": 2,
                "production": 24
            }
        },
        "43": {
            "CLOSE": {
                "type": 2,
                "production": 31
            },
            "ID": {
                "type": 2,
                "production": 31
            },
            "STRING": {
                "type": 2,
                "production": 31
            },
            "NUMBER": {
                "type": 2,
                "production": 31
            },
            "BOOLEAN": {
                "type": 2,
                "production": 31
            },
            "SEP": {
                "type": 2,
                "production": 31
            }
        },
        "44": {
            "CLOSE": {
                "type": 1,
                "to": 49
            }
        },
        "45": {
            "CLOSE": {
                "type": 2,
                "production": 27
            },
            "ID": {
                "type": 2,
                "production": 27
            }
        },
        "46": {
            "CLOSE": {
                "type": 2,
                "production": 29
            },
            "ID": {
                "type": 2,
                "production": 29
            }
        },
        "47": {
            "CLOSE": {
                "type": 2,
                "production": 28
            },
            "ID": {
                "type": 2,
                "production": 28
            }
        },
        "48": {
            "CLOSE": {
                "type": 2,
                "production": 26
            },
            "ID": {
                "type": 2,
                "production": 26
            }
        },
        "49": {
            "$EOF": {
                "type": 2,
                "production": 9
            },
            "OPEN_INVERSE": {
                "type": 2,
                "production": 9
            },
            "OPEN_BLOCK": {
                "type": 2,
                "production": 9
            },
            "OPEN": {
                "type": 2,
                "production": 9
            },
            "OPEN_UN_ESCAPED": {
                "type": 2,
                "production": 9
            },
            "CONTENT": {
                "type": 2,
                "production": 9
            },
            "OPEN_END_BLOCK": {
                "type": 2,
                "production": 9
            }
        }
    }
};
parser.parse = function parse(input) {

    var self = this,
        lexer = self.lexer,
        state, symbol, action, table = self.table,
        gotos = table.gotos,
        tableAction = table.action,
        productions = self.productions,
        valueStack = [null],
        stack = [0];

    lexer.resetInput(input);

    while (1) {
        // retrieve state number from top of stack
        state = stack[stack.length - 1];

        if (!symbol) {
            symbol = lexer.lex();
        }

        if (!symbol) {
            S.log("it is not a valid input : " + input, "error");
            return false;
        }

        // read action for current state and first input
        action = tableAction[state] && tableAction[state][symbol];

        if (!action) {
            var expected = [];
            if (tableAction[state]) {
                S.each(tableAction[state], function (_, symbol) {
                    expected.push(symbol);
                });
            }
            S.error("parse error at line " + lexer.lineNumber + ":\n" + lexer.showDebugInfo() + "\n" + "expect " + expected.join(", "));
            return false;
        }

        switch (action.type) {

        case SHIFT_TYPE:

            stack.push(symbol);

            valueStack.push(lexer.text);

            // push state
            stack.push(action.to);

            // allow to read more
            symbol = null;

            break;

        case REDUCE_TYPE:

            var production = productions[action.production],
                reducedSymbol = production.symbol,
                reducedAction = production.action,
                reducedRhs = production.rhs;

            var len = reducedRhs.length;

            var $$ = valueStack[valueStack.length - len]; // default to $$ = $1

            this.$$ = $$;

            for (var i = 0; i < len; i++) {
                this["$" + (len - i)] = valueStack[valueStack.length - 1 - i];
            }

            var ret;

            if (reducedAction) {
                ret = reducedAction.call(this);
            }

            if (ret !== undefined) {
                $$ = ret;
            } else {
                $$ = this.$$;
            }

            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                valueStack = valueStack.slice(0, -1 * len);
            }

            stack.push(reducedSymbol);

            valueStack.push($$);

            var newState = gotos[stack[stack.length - 2]][stack[stack.length - 1]];

            stack.push(newState);

            break;

        case ACCEPT_TYPE:

            return $$;
        }

    }

    return undefined;

};
return parser;
});