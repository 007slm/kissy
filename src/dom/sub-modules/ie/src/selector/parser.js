/*
  Generated by kissy-kison.*/
KISSY.add("dom/ie/selector/parser", function () {
    /* Generated by kison from KISSY */
    var parser = {}, S = KISSY,
        GrammarConst = {
            'SHIFT_TYPE': 1,
            'REDUCE_TYPE': 2,
            'ACCEPT_TYPE': 0,
            'TYPE_INDEX': 0,
            'PRODUCTION_INDEX': 1,
            'TO_INDEX': 2
        };
    var Lexer = function (cfg) {

        var self = this;

        /*
             lex rules.
             @type {Object[]}
             @example
             [
             {
             regexp:'\\w+',
             state:['xx'],
             token:'c',
             // this => lex
             action:function(){}
             }
             ]
             */
        self.rules = [];

        S.mix(self, cfg);

        /*
             Input languages
             @type {String}
             */

        self.resetInput(self.input);

    };
    Lexer.prototype = {
        'constructor': function (cfg) {

            var self = this;

            /*
             lex rules.
             @type {Object[]}
             @example
             [
             {
             regexp:'\\w+',
             state:['xx'],
             token:'c',
             // this => lex
             action:function(){}
             }
             ]
             */
            self.rules = [];

            S.mix(self, cfg);

            /*
             Input languages
             @type {String}
             */

            self.resetInput(self.input);

        },
        'resetInput': function (input) {
            S.mix(this, {
                input: input,
                matched: "",
                stateStack: [Lexer.STATIC.INITIAL],
                match: "",
                text: "",
                firstLine: 1,
                lineNumber: 1,
                lastLine: 1,
                firstColumn: 1,
                lastColumn: 1
            });
        },
        'getCurrentRules': function () {
            var self = this,
                currentState = self.stateStack[self.stateStack.length - 1],
                rules = [];
            currentState = self.mapState(currentState);
            S.each(self.rules, function (r) {
                var state = r.state || r[3];
                if (!state) {
                    if (currentState == Lexer.STATIC.INITIAL) {
                        rules.push(r);
                    }
                } else if (S.inArray(currentState, state)) {
                    rules.push(r);
                }
            });
            return rules;
        },
        'pushState': function (state) {
            this.stateStack.push(state);
        },
        'popState': function () {
            return this.stateStack.pop();
        },
        'getStateStack': function () {
            return this.stateStack;
        },
        'showDebugInfo': function () {
            var self = this,
                DEBUG_CONTEXT_LIMIT = Lexer.STATIC.DEBUG_CONTEXT_LIMIT,
                matched = self.matched,
                match = self.match,
                input = self.input;
            matched = matched.slice(0, matched.length - match.length);
            var past = (matched.length > DEBUG_CONTEXT_LIMIT ? "..." : "") + matched.slice(-DEBUG_CONTEXT_LIMIT).replace(/\n/, " "),
                next = match + input;
            next = next.slice(0, DEBUG_CONTEXT_LIMIT) + (next.length > DEBUG_CONTEXT_LIMIT ? "..." : "");
            return past + next + "\n" + new Array(past.length + 1).join("-") + "^";
        },
        'mapSymbol': function (t) {
            var self = this,
                symbolMap = self.symbolMap;
            if (!symbolMap) {
                return t;
            }
            return symbolMap[t] || (symbolMap[t] = (++self.symbolId));
        },
        'mapReverseSymbol': function (rs) {
            var self = this,
                symbolMap = self.symbolMap,
                i,
                reverseSymbolMap = self.reverseSymbolMap;
            if (!reverseSymbolMap && symbolMap) {
                reverseSymbolMap = self.reverseSymbolMap = {};
                for (i in symbolMap) {
                    reverseSymbolMap[symbolMap[i]] = i;
                }
            }
            if (reverseSymbolMap) {
                return reverseSymbolMap[rs];
            } else {
                return rs;
            }
        },
        'mapState': function (s) {
            var self = this,
                stateMap = self.stateMap;
            if (!stateMap) {
                return s;
            }
            return stateMap[s] || (stateMap[s] = (++self.stateId));
        },
        'lex': function () {
            var self = this,
                input = self.input,
                i,
                rule,
                m,
                ret,
                lines,
                rules = self.getCurrentRules();

            self.match = self.text = "";

            if (!input) {
                return self.mapSymbol(Lexer.STATIC.END_TAG);
            }

            for (i = 0; i < rules.length; i++) {
                rule = rules[i];
                var regexp = rule.regexp || rule[1],
                    token = rule.token || rule[0],
                    action = rule.action || rule[2] || undefined;
                if (m = input.match(regexp)) {
                    lines = m[0].match(/\n.*/g);
                    if (lines) {
                        self.lineNumber += lines.length;
                    }
                    S.mix(self, {
                        firstLine: self.lastLine,
                        lastLine: self.lineNumber + 1,
                        firstColumn: self.lastColumn,
                        lastColumn: lines ? lines[lines.length - 1].length - 1 : self.lastColumn + m[0].length
                    });
                    var match;
                    // for error report
                    match = self.match = m[0];

                    // all matches
                    self.matches = m;
                    // may change by user
                    self.text = match;
                    // matched content utils now
                    self.matched += match;
                    ret = action && action.call(self);
                    if (ret == undefined) {
                        ret = token;
                    } else {
                        ret = self.mapSymbol(ret);
                    }
                    input = input.slice(match.length);
                    self.input = input;

                    if (ret) {
                        return ret;
                    } else {
                        // ignore
                        return self.lex();
                    }
                }
            }

            S.error("lex error at line " + self.lineNumber + ":\n" + self.showDebugInfo());
            return undefined;
        }
    };
    Lexer.STATIC = {
        'INITIAL': 'I',
        'DEBUG_CONTEXT_LIMIT': 20,
        'END_TAG': '$EOF'
    };
    var lexer = new Lexer({
        'rules': [
            [2, /^\[(?:[\t\r\n\f\x20]*)/, function () {
                this.text = KISSY.trim(this.text);
            }],
            [3, /^(?:[\t\r\n\f\x20]*)\]/, function () {
                this.text = KISSY.trim(this.text);
            }],
            [4, /^(?:[\t\r\n\f\x20]*)~=(?:[\t\r\n\f\x20]*)/, function () {
                this.text = KISSY.trim(this.text);
            }],
            [5, /^(?:[\t\r\n\f\x20]*)\|=(?:[\t\r\n\f\x20]*)/, function () {
                this.text = KISSY.trim(this.text);
            }],
            [6, /^(?:[\t\r\n\f\x20]*)\^=(?:[\t\r\n\f\x20]*)/, function () {
                this.text = KISSY.trim(this.text);
            }],
            [7, /^(?:[\t\r\n\f\x20]*)\$=(?:[\t\r\n\f\x20]*)/, function () {
                this.text = KISSY.trim(this.text);
            }],
            [8, /^(?:[\t\r\n\f\x20]*)\*=(?:[\t\r\n\f\x20]*)/, function () {
                this.text = KISSY.trim(this.text);
            }],
            [9, /^(?:[\t\r\n\f\x20]*)\=(?:[\t\r\n\f\x20]*)/, function () {
                this.text = KISSY.trim(this.text);
            }],
            [10, /^(?:(?:[\w]|(?:\\[^\n\r\f0-9a-f]))(?:[\w\d-]|(?:\\[^\n\r\f0-9a-f]))*)\((?:[\t\r\n\f\x20]*)[^\)]*(?:[\t\r\n\f\x20]*)\)/, function () {
                this.text = KISSY.trim(this.text);
            }],
            [11, /^(?:[\t\r\n\f\x20]*)\)/, function () {
                this.text = KISSY.trim(this.text);
            }],
            [12, /^:not\((?:[\t\r\n\f\x20]*)/, function () {
                this.text = KISSY.trim(this.text);
            }],
            [13, /^(?:(?:[\w]|(?:\\[^\n\r\f0-9a-f]))(?:[\w\d-]|(?:\\[^\n\r\f0-9a-f]))*)/, 0],
            [14, /^"(\\"|[^"])*"/, function () {
                this.text = this.text.slice(1, - 1).replace(/\\"/g, '"');
            }],
            [14, /^'(\\'|[^'])*'/, function () {
                this.text = this.text.slice(1, - 1).replace(/\\'/g, "'");
            }],
            [15, /^#(?:(?:[\w\d-]|(?:\\[^\n\r\f0-9a-f]))+)/, 0],
            [16, /^\.(?:(?:[\w]|(?:\\[^\n\r\f0-9a-f]))(?:[\w\d-]|(?:\\[^\n\r\f0-9a-f]))*)/, 0],
            [17, /^(?:[\t\r\n\f\x20]*),(?:[\t\r\n\f\x20]*)/, function () {
                this.text = KISSY.trim(this.text);
            }],
            [18, /^::?/, 0],
            [19, /^(?:[\t\r\n\f\x20]*)\+(?:[\t\r\n\f\x20]*)/, function () {
                this.text = KISSY.trim(this.text);
            }],
            [20, /^(?:[\t\r\n\f\x20]*)>(?:[\t\r\n\f\x20]*)/, function () {
                this.text = KISSY.trim(this.text);
            }],
            [21, /^(?:[\t\r\n\f\x20]*)~(?:[\t\r\n\f\x20]*)/, function () {
                this.text = KISSY.trim(this.text);
            }],
            [22, /^\*/, 0],
            [23, /^(?:[\t\r\n\f\x20]+)/, 0],
            [24, /^./, 0]
        ]
    });
    parser.lexer = lexer;
    lexer.symbolMap = {
        '$EOF': 1,
        'LEFT_BRACKET': 2,
        'RIGHT_BRACKET': 3,
        'INCLUDES': 4,
        'DASH_MATCH': 5,
        'PREFIX_MATCH': 6,
        'SUFFIX_MATCH': 7,
        'SUBSTRING_MATCH': 8,
        'ALL_MATCH': 9,
        'FUNCTION': 10,
        'RIGHT_PARENTHESES': 11,
        'NOT': 12,
        'INDENT': 13,
        'STRING': 14,
        'HASH': 15,
        'CLASS': 16,
        'COMMA': 17,
        'COLON': 18,
        'PLUS': 19,
        'GREATER': 20,
        'TILDE': 21,
        'UNIVERSAL': 22,
        'S': 23,
        'INVALID': 24,
        '$START': 25,
        'selectors_group': 26,
        'selector': 27,
        'simple_selector_sequence': 28,
        'combinator': 29,
        'type_selector': 30,
        'id_selector': 31,
        'class_selector': 32,
        'attrib_match': 33,
        'attrib': 34,
        'pseudo': 35,
        'negation': 36,
        'negation_arg': 37,
        'suffix_selector': 38,
        'suffix_selectors': 39
    };
    parser.productions = [
        [25, [26]],
        [26, [27], function () {
            return [this.$1];
        }],
        [26, [26, 17, 27], function () {
            this.$1.push(this.$3);
        }],
        [27, [28]],
        [27, [27, 29, 28], function () {
            // LinkedList
            this.$1.nextCombinator = this.$3.prevCombinator = this.$2;
            this.$3.prev = this.$1;
            this.$1.next = this.$3;
            return this.$3;
        }],
        [29, [19]],
        [29, [20]],
        [29, [21]],
        [29, [23], function () {
            return ' ';
        }],
        [30, [13], function () {
            return {
                tagName: this.$1
            };
        }],
        [30, [22], function () {
            return {
                tagName: this.$1
            };
        }],
        [31, [15], function () {
            return {
                id: this.$1
            };
        }],
        [32, [16], function () {
            return {
                cls: this.$1
            };
        }],
        [33, [6]],
        [33, [7]],
        [33, [8]],
        [33, [9]],
        [33, [4]],
        [33, [5]],
        [34, [2, 13, 3], function () {
            return {
                attrib: {
                    indent: this.$2
                }
            };
        }],
        [34, [2, 13, 33, 13, 3], function () {
            return {
                attrib: {
                    indent: this.$2,
                    match: this.$3,
                    value: this.$4
                }
            };
        }],
        [34, [2, 13, 33, 14, 3], function () {
            return {
                attrib: {
                    indent: this.$2,
                    match: this.$3,
                    value: this.$4
                }
            };
        }],
        [35, [18, 10], function () {
            return {
                pseudo: {
                    fn: this.$2
                }
            };
        }],
        [35, [18, 13], function () {
            return {
                pseudo: {
                    indent: this.$2
                }
            };
        }],
        [36, [12, 37, 11], function () {
            return {
                negation: this.$2
            };
        }],
        [37, [30]],
        [37, [31]],
        [37, [32]],
        [37, [34]],
        [37, [35]],
        [38, [31]],
        [38, [32]],
        [38, [34]],
        [38, [35]],
        [38, [36]],
        [39, [38], function () {
            return [this.$1];
        }],
        [39, [39, 38], function () {
            this.$1.push(this.$2);
        }],
        [28, [30]],
        [28, [39], function () {
            return {
                suffix: this.$1
            };
        }],
        [28, [30, 39], function () {
            var ret = {};
            ret.tagName = this.$1.tagName;
            ret.suffix = this.$2;
            return ret;
        }]
    ];
    parser.table = {
        'gotos': {
            '0': {
                '26': 8,
                '27': 9,
                '28': 10,
                '30': 11,
                '31': 12,
                '32': 13,
                '34': 14,
                '35': 15,
                '36': 16,
                '38': 17,
                '39': 18
            },
            '2': {
                '30': 20,
                '31': 21,
                '32': 22,
                '34': 23,
                '35': 24,
                '37': 25
            },
            '9': {
                '29': 33
            },
            '11': {
                '31': 12,
                '32': 13,
                '34': 14,
                '35': 15,
                '36': 16,
                '38': 17,
                '39': 34
            },
            '18': {
                '31': 12,
                '32': 13,
                '34': 14,
                '35': 15,
                '36': 16,
                '38': 35
            },
            '19': {
                '33': 43
            },
            '28': {
                '27': 45,
                '28': 10,
                '30': 11,
                '31': 12,
                '32': 13,
                '34': 14,
                '35': 15,
                '36': 16,
                '38': 17,
                '39': 18
            },
            '33': {
                '28': 46,
                '30': 11,
                '31': 12,
                '32': 13,
                '34': 14,
                '35': 15,
                '36': 16,
                '38': 17,
                '39': 18
            },
            '34': {
                '31': 12,
                '32': 13,
                '34': 14,
                '35': 15,
                '36': 16,
                '38': 35
            },
            '45': {
                '29': 33
            }
        },
        'action': {
            '0': {
                '2': [1, 0, 1],
                '12': [1, 0, 2],
                '13': [1, 0, 3],
                '15': [1, 0, 4],
                '16': [1, 0, 5],
                '18': [1, 0, 6],
                '22': [1, 0, 7]
            },
            '1': {
                '13': [1, 0, 19]
            },
            '2': {
                '2': [1, 0, 1],
                '13': [1, 0, 3],
                '15': [1, 0, 4],
                '16': [1, 0, 5],
                '18': [1, 0, 6],
                '22': [1, 0, 7]
            },
            '3': {
                '1': [2, 9, 0],
                '2': [2, 9, 0],
                '11': [2, 9, 0],
                '12': [2, 9, 0],
                '15': [2, 9, 0],
                '16': [2, 9, 0],
                '17': [2, 9, 0],
                '18': [2, 9, 0],
                '19': [2, 9, 0],
                '20': [2, 9, 0],
                '21': [2, 9, 0],
                '23': [2, 9, 0]
            },
            '4': {
                '1': [2, 11, 0],
                '2': [2, 11, 0],
                '11': [2, 11, 0],
                '12': [2, 11, 0],
                '15': [2, 11, 0],
                '16': [2, 11, 0],
                '17': [2, 11, 0],
                '18': [2, 11, 0],
                '19': [2, 11, 0],
                '20': [2, 11, 0],
                '21': [2, 11, 0],
                '23': [2, 11, 0]
            },
            '5': {
                '1': [2, 12, 0],
                '2': [2, 12, 0],
                '11': [2, 12, 0],
                '12': [2, 12, 0],
                '15': [2, 12, 0],
                '16': [2, 12, 0],
                '17': [2, 12, 0],
                '18': [2, 12, 0],
                '19': [2, 12, 0],
                '20': [2, 12, 0],
                '21': [2, 12, 0],
                '23': [2, 12, 0]
            },
            '6': {
                '10': [1, 0, 26],
                '13': [1, 0, 27]
            },
            '7': {
                '1': [2, 10, 0],
                '2': [2, 10, 0],
                '11': [2, 10, 0],
                '12': [2, 10, 0],
                '15': [2, 10, 0],
                '16': [2, 10, 0],
                '17': [2, 10, 0],
                '18': [2, 10, 0],
                '19': [2, 10, 0],
                '20': [2, 10, 0],
                '21': [2, 10, 0],
                '23': [2, 10, 0]
            },
            '8': {
                '1': [0, 0, 0],
                '17': [1, 0, 28]
            },
            '9': {
                '1': [2, 1, 0],
                '17': [2, 1, 0],
                '19': [1, 0, 29],
                '20': [1, 0, 30],
                '21': [1, 0, 31],
                '23': [1, 0, 32]
            },
            '10': {
                '1': [2, 3, 0],
                '17': [2, 3, 0],
                '19': [2, 3, 0],
                '20': [2, 3, 0],
                '21': [2, 3, 0],
                '23': [2, 3, 0]
            },
            '11': {
                '1': [2, 37, 0],
                '2': [1, 0, 1],
                '12': [1, 0, 2],
                '15': [1, 0, 4],
                '16': [1, 0, 5],
                '17': [2, 37, 0],
                '18': [1, 0, 6],
                '19': [2, 37, 0],
                '20': [2, 37, 0],
                '21': [2, 37, 0],
                '23': [2, 37, 0]
            },
            '12': {
                '1': [2, 30, 0],
                '2': [2, 30, 0],
                '12': [2, 30, 0],
                '15': [2, 30, 0],
                '16': [2, 30, 0],
                '17': [2, 30, 0],
                '18': [2, 30, 0],
                '19': [2, 30, 0],
                '20': [2, 30, 0],
                '21': [2, 30, 0],
                '23': [2, 30, 0]
            },
            '13': {
                '1': [2, 31, 0],
                '2': [2, 31, 0],
                '12': [2, 31, 0],
                '15': [2, 31, 0],
                '16': [2, 31, 0],
                '17': [2, 31, 0],
                '18': [2, 31, 0],
                '19': [2, 31, 0],
                '20': [2, 31, 0],
                '21': [2, 31, 0],
                '23': [2, 31, 0]
            },
            '14': {
                '1': [2, 32, 0],
                '2': [2, 32, 0],
                '12': [2, 32, 0],
                '15': [2, 32, 0],
                '16': [2, 32, 0],
                '17': [2, 32, 0],
                '18': [2, 32, 0],
                '19': [2, 32, 0],
                '20': [2, 32, 0],
                '21': [2, 32, 0],
                '23': [2, 32, 0]
            },
            '15': {
                '1': [2, 33, 0],
                '2': [2, 33, 0],
                '12': [2, 33, 0],
                '15': [2, 33, 0],
                '16': [2, 33, 0],
                '17': [2, 33, 0],
                '18': [2, 33, 0],
                '19': [2, 33, 0],
                '20': [2, 33, 0],
                '21': [2, 33, 0],
                '23': [2, 33, 0]
            },
            '16': {
                '1': [2, 34, 0],
                '2': [2, 34, 0],
                '12': [2, 34, 0],
                '15': [2, 34, 0],
                '16': [2, 34, 0],
                '17': [2, 34, 0],
                '18': [2, 34, 0],
                '19': [2, 34, 0],
                '20': [2, 34, 0],
                '21': [2, 34, 0],
                '23': [2, 34, 0]
            },
            '17': {
                '1': [2, 35, 0],
                '2': [2, 35, 0],
                '12': [2, 35, 0],
                '15': [2, 35, 0],
                '16': [2, 35, 0],
                '17': [2, 35, 0],
                '18': [2, 35, 0],
                '19': [2, 35, 0],
                '20': [2, 35, 0],
                '21': [2, 35, 0],
                '23': [2, 35, 0]
            },
            '18': {
                '1': [2, 38, 0],
                '2': [1, 0, 1],
                '12': [1, 0, 2],
                '15': [1, 0, 4],
                '16': [1, 0, 5],
                '17': [2, 38, 0],
                '18': [1, 0, 6],
                '19': [2, 38, 0],
                '20': [2, 38, 0],
                '21': [2, 38, 0],
                '23': [2, 38, 0]
            },
            '19': {
                '3': [1, 0, 36],
                '4': [1, 0, 37],
                '5': [1, 0, 38],
                '6': [1, 0, 39],
                '7': [1, 0, 40],
                '8': [1, 0, 41],
                '9': [1, 0, 42]
            },
            '20': {
                '11': [2, 25, 0]
            },
            '21': {
                '11': [2, 26, 0]
            },
            '22': {
                '11': [2, 27, 0]
            },
            '23': {
                '11': [2, 28, 0]
            },
            '24': {
                '11': [2, 29, 0]
            },
            '25': {
                '11': [1, 0, 44]
            },
            '26': {
                '1': [2, 22, 0],
                '2': [2, 22, 0],
                '11': [2, 22, 0],
                '12': [2, 22, 0],
                '15': [2, 22, 0],
                '16': [2, 22, 0],
                '17': [2, 22, 0],
                '18': [2, 22, 0],
                '19': [2, 22, 0],
                '20': [2, 22, 0],
                '21': [2, 22, 0],
                '23': [2, 22, 0]
            },
            '27': {
                '1': [2, 23, 0],
                '2': [2, 23, 0],
                '11': [2, 23, 0],
                '12': [2, 23, 0],
                '15': [2, 23, 0],
                '16': [2, 23, 0],
                '17': [2, 23, 0],
                '18': [2, 23, 0],
                '19': [2, 23, 0],
                '20': [2, 23, 0],
                '21': [2, 23, 0],
                '23': [2, 23, 0]
            },
            '28': {
                '2': [1, 0, 1],
                '12': [1, 0, 2],
                '13': [1, 0, 3],
                '15': [1, 0, 4],
                '16': [1, 0, 5],
                '18': [1, 0, 6],
                '22': [1, 0, 7]
            },
            '29': {
                '2': [2, 5, 0],
                '12': [2, 5, 0],
                '13': [2, 5, 0],
                '15': [2, 5, 0],
                '16': [2, 5, 0],
                '18': [2, 5, 0],
                '22': [2, 5, 0]
            },
            '30': {
                '2': [2, 6, 0],
                '12': [2, 6, 0],
                '13': [2, 6, 0],
                '15': [2, 6, 0],
                '16': [2, 6, 0],
                '18': [2, 6, 0],
                '22': [2, 6, 0]
            },
            '31': {
                '2': [2, 7, 0],
                '12': [2, 7, 0],
                '13': [2, 7, 0],
                '15': [2, 7, 0],
                '16': [2, 7, 0],
                '18': [2, 7, 0],
                '22': [2, 7, 0]
            },
            '32': {
                '2': [2, 8, 0],
                '12': [2, 8, 0],
                '13': [2, 8, 0],
                '15': [2, 8, 0],
                '16': [2, 8, 0],
                '18': [2, 8, 0],
                '22': [2, 8, 0]
            },
            '33': {
                '2': [1, 0, 1],
                '12': [1, 0, 2],
                '13': [1, 0, 3],
                '15': [1, 0, 4],
                '16': [1, 0, 5],
                '18': [1, 0, 6],
                '22': [1, 0, 7]
            },
            '34': {
                '1': [2, 39, 0],
                '2': [1, 0, 1],
                '12': [1, 0, 2],
                '15': [1, 0, 4],
                '16': [1, 0, 5],
                '17': [2, 39, 0],
                '18': [1, 0, 6],
                '19': [2, 39, 0],
                '20': [2, 39, 0],
                '21': [2, 39, 0],
                '23': [2, 39, 0]
            },
            '35': {
                '1': [2, 36, 0],
                '2': [2, 36, 0],
                '12': [2, 36, 0],
                '15': [2, 36, 0],
                '16': [2, 36, 0],
                '17': [2, 36, 0],
                '18': [2, 36, 0],
                '19': [2, 36, 0],
                '20': [2, 36, 0],
                '21': [2, 36, 0],
                '23': [2, 36, 0]
            },
            '36': {
                '1': [2, 19, 0],
                '2': [2, 19, 0],
                '11': [2, 19, 0],
                '12': [2, 19, 0],
                '15': [2, 19, 0],
                '16': [2, 19, 0],
                '17': [2, 19, 0],
                '18': [2, 19, 0],
                '19': [2, 19, 0],
                '20': [2, 19, 0],
                '21': [2, 19, 0],
                '23': [2, 19, 0]
            },
            '37': {
                '13': [2, 17, 0],
                '14': [2, 17, 0]
            },
            '38': {
                '13': [2, 18, 0],
                '14': [2, 18, 0]
            },
            '39': {
                '13': [2, 13, 0],
                '14': [2, 13, 0]
            },
            '40': {
                '13': [2, 14, 0],
                '14': [2, 14, 0]
            },
            '41': {
                '13': [2, 15, 0],
                '14': [2, 15, 0]
            },
            '42': {
                '13': [2, 16, 0],
                '14': [2, 16, 0]
            },
            '43': {
                '13': [1, 0, 47],
                '14': [1, 0, 48]
            },
            '44': {
                '1': [2, 24, 0],
                '2': [2, 24, 0],
                '12': [2, 24, 0],
                '15': [2, 24, 0],
                '16': [2, 24, 0],
                '17': [2, 24, 0],
                '18': [2, 24, 0],
                '19': [2, 24, 0],
                '20': [2, 24, 0],
                '21': [2, 24, 0],
                '23': [2, 24, 0]
            },
            '45': {
                '1': [2, 2, 0],
                '17': [2, 2, 0],
                '19': [1, 0, 29],
                '20': [1, 0, 30],
                '21': [1, 0, 31],
                '23': [1, 0, 32]
            },
            '46': {
                '1': [2, 4, 0],
                '17': [2, 4, 0],
                '19': [2, 4, 0],
                '20': [2, 4, 0],
                '21': [2, 4, 0],
                '23': [2, 4, 0]
            },
            '47': {
                '3': [1, 0, 49]
            },
            '48': {
                '3': [1, 0, 50]
            },
            '49': {
                '1': [2, 20, 0],
                '2': [2, 20, 0],
                '11': [2, 20, 0],
                '12': [2, 20, 0],
                '15': [2, 20, 0],
                '16': [2, 20, 0],
                '17': [2, 20, 0],
                '18': [2, 20, 0],
                '19': [2, 20, 0],
                '20': [2, 20, 0],
                '21': [2, 20, 0],
                '23': [2, 20, 0]
            },
            '50': {
                '1': [2, 21, 0],
                '2': [2, 21, 0],
                '11': [2, 21, 0],
                '12': [2, 21, 0],
                '15': [2, 21, 0],
                '16': [2, 21, 0],
                '17': [2, 21, 0],
                '18': [2, 21, 0],
                '19': [2, 21, 0],
                '20': [2, 21, 0],
                '21': [2, 21, 0],
                '23': [2, 21, 0]
            }
        }
    };
    parser.parse = function parse(input) {

        var self = this,
            lexer = self.lexer,
            state,
            symbol,
            action,
            table = self.table,
            gotos = table.gotos,
            tableAction = table.action,
            productions = self.productions,
            valueStack = [null],
            stack = [0];

        lexer.resetInput(input);

        while (1) {
            // retrieve state number from top of stack
            state = stack[stack.length - 1];

            if (!symbol) {
                symbol = lexer.lex();
            }

            if (!symbol) {
                S.log("it is not a valid input: " + input, "error");
                return false;
            }

            // read action for current state and first input
            action = tableAction[state] && tableAction[state][symbol];

            if (!action) {
                var expected = [],
                    error;
                if (tableAction[state]) {
                    S.each(tableAction[state], function (_, symbol) {
                        expected.push(self.lexer.mapReverseSymbol(symbol));
                    });
                }
                error = "parse error at line " + lexer.lineNumber + ":\n" + lexer.showDebugInfo() + "\n" + "expect " + expected.join(", ");
                S.error(error);
                return false;
            }

            switch (action[GrammarConst.TYPE_INDEX]) {

            case GrammarConst.SHIFT_TYPE:

                stack.push(symbol);

                valueStack.push(lexer.text);

                // push state
                stack.push(action[GrammarConst.TO_INDEX]);

                // allow to read more
                symbol = null;

                break;

            case GrammarConst.REDUCE_TYPE:

                var production = productions[action[GrammarConst.PRODUCTION_INDEX]],
                    reducedSymbol = production.symbol || production[0],
                    reducedAction = production.action || production[2],
                    reducedRhs = production.rhs || production[1],
                    len = reducedRhs.length,
                    i = 0,
                    ret = undefined,
                    $$ = valueStack[valueStack.length - len]; // default to $$ = $1

                self.$$ = $$;

                for (; i < len; i++) {
                    self["$" + (len - i)] = valueStack[valueStack.length - 1 - i];
                }

                if (reducedAction) {
                    ret = reducedAction.call(self);
                }

                if (ret !== undefined) {
                    $$ = ret;
                } else {
                    $$ = self.$$;
                }

                if (len) {
                    stack = stack.slice(0, - 1 * len * 2);
                    valueStack = valueStack.slice(0, - 1 * len);
                }

                stack.push(reducedSymbol);

                valueStack.push($$);

                var newState = gotos[stack[stack.length - 2]][stack[stack.length - 1]];

                stack.push(newState);

                break;

            case GrammarConst.ACCEPT_TYPE:

                return $$;
            }

        }

        return undefined;

    };
    return parser;;
});